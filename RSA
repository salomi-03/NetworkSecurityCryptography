import java.math.BigInteger;
import java.util.Random;
import java.util.Scanner;

public class RSA {
    static Scanner sc = new Scanner(System.in);

    public static void main(String[] args) {
        System.out.print("Enter a prime number (p): ");
        BigInteger p = sc.nextBigInteger();

        System.out.print("Enter another prime number (q): ");
        BigInteger q = sc.nextBigInteger();

        // n = p * q
        BigInteger n = p.multiply(q);

        // Ï†(n) = (p - 1)(q - 1)
        BigInteger phi = p.subtract(BigInteger.ONE)
                          .multiply(q.subtract(BigInteger.ONE));

        // Generate public exponent e
        BigInteger e = generateE(phi);

        // Calculate private exponent d such that (d * e) mod phi = 1
        BigInteger d = e.modInverse(phi);

        System.out.println("Public Key (e, n): (" + e + ", " + n + ")");
        System.out.println("Private Key (d, n): (" + d + ", " + n + ")");
    }

    // Generate a valid e such that gcd(e, phi) = 1
    public static BigInteger generateE(BigInteger phi) {
        Random rand = new Random();
        BigInteger e;

        do {
            e = new BigInteger(phi.bitLength(), rand);
        } while (e.compareTo(BigInteger.TWO) <= 0 ||
                 !phi.gcd(e).equals(BigInteger.ONE));

        return e;
    }
}
